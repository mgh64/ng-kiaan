//
//
//
var db = require('db');
var convert_date = require('date');
var mongoose = require('mongoose');
var byAddEdit = require('functions/by/addEdit');
var miladi_code = require('functions/miladi_code')
var newOperationId = require('functions/newOperationId/new');

module.exports = function(data, cb) {

  cb = cb || function() {};

  if (!data) {
    cb({
      status: 400,
      message: "low args"
    });
  } else {
    data = String.remove_empty_data(data);
    //validate
    validate(data, function(status) {
      if (status.valid == true) {
        data = status.data;
        console.open(data);
        if (data.transfer) {
          //add
          console.log('add');
          // console.open(data.debtor);
          // console.open(data.creditor);
          add(data, cb);
        } else {
          //edit
          console.log('Edit');
          // db.operations.findOne({
          //   _id: new_transfer._id
          // }, function(err, _transfer) {
          //   if (err) throw err;
          //   if (_transfer) {
          //     //require fields
          //     ['type', 'person_id', 'debtor_id', 'creditor_id', 'items'].forEach(function(attr) {
          //       if (new_transfer[attr])
          //         _transfer[attr] = new_transfer[attr];
          //     });
          //     //optional fields
          //     ['comment'].forEach(function(attr) {
          //       _transfer[attr] = new_transfer[attr];
          //     });
          //     //
          //     _transfer.save(function(err, r) {
          //       if (err) {
          //         throw err;
          //       } else {
          //         cb(null, {
          //           edit: true
          //         });
          //       }
          //     });
          //     //
          //   } else {
          //     next({
          //       status: 404
          //     });
          //   }
          // })
          //end edit
        }
      } else {
        cb(null, {
          add: false,
          adit: false,
          not_valid: true
        });
      }
    });
    //
  }
}

function get_transferId(cb) {
  cb = cb || function() {};
  newOperationId(function(err, res) {
    if (err) throw error;
    if (res) {
      // console.log(res);
      cb(null, res);
    }
  })
}

function add(data, cb) {
  cb = cb || function() {};
  //add_transfer
  get_transferId(function(err, res) {
    if (err) {
      cb(null, {
        error: true,
        type: 'get_transferId'
      })
    } else if (res) {
      if (data.debtor && data.creditor) {
        data.debtor.id = res;
        data.creditor.id = res;
        db.operations.create(data.debtor, data.creditor, function(err, d, c) {
          // error with db
          if (err) {
            cb({
              status: 400,
              error_obj: err
            }, null);
          } else if (d && c) {
            // save
            cb(null, {
              add: true
            });
          }
        });
      } else if (data.transfer) {
        data.transfer.id = res;
        new db.operations(data.transfer).save(function(err) {
          if (err) {
            cb({
              status: 400,
              error_obj: err
            }, null);
          } else {
            // save
            cb(null, {
              add: true
            });
          }
        });

      }

      // console.open(debtor);
      // console.open(creditor);
    }
  });
}

function validate(data, cb) {
  cb = cb || function() {};

  // console.open(data);
  if (!data ||
    !data.type ||
    !data.price ||
    (data.type != 'c2b' && !data.debtor_id) ||
    (data.type != 'b2c' && !data.creator_id) ||
    !data.creator_id
  ) {
    return cb({
      valid: false
    });
  }
  var debtor = {
    type: data.type,
    creator_id: data.creator_id,
    items: [{}]
  };
  var creditor = {
    type: data.type,
    creator_id: data.creator_id,
    items: [{}]
  };
  if (!data._idOfDebtor && !data._idOfCreditor) {
    var new_id = mongoose.Types.ObjectId();
    debtor.items[0]._id = new_id;
    creditor._id = new_id;
  }
  var transfer = {
    type: data.type,
    creator_id: data.creator_id,
    items: [{},{}]
  }
  data.price = Math.abs(Number.NumtoEn(data.price));
  switch (data.type) {
    case 'p2p':
      transfer.items[0].person_id = data.debtor_id;
      transfer.items[0].comment = data.debtor_comment;
      transfer.items[0].price = -data.price;

      transfer.items[1].person_id = data.creditor_id;
      transfer.items[1].comment = data.creditor_comment;
      transfer.items[1].price = data.price;

      // debtor.person_id = data.debtor_id;
      // debtor.items[0].creditor_id = data.creditor_id;
      // debtor.items[0].price = -(data.price);
      // if (data._idOfDebtor) debtor._id = data._idOfDebtor;
      // if (data._idOfCreditor) debtor.items[0]._id = data._idOfCreditor;
      // //
      // creditor.person_id = data.creditor_id;
      // creditor.items[0].debtor_id = data.debtor_id
      // creditor.items[0].price = data.price;
      // if (data._idOfCreditor) creditor._id = data._idOfCreditor;
      break;
    case 'c2b':
      debtor.creditor_id = data.creditor_id;
      debtor.items[0].type = 'cash';
      debtor.items[0].price = -data.price;
      //
      creditor.items[0].bankacc_id = data.creditor_id;
      creditor.items[0].price = data.price;
      break;
    case 'b2c':
      debtor.items[0].bankacc_id = data.debtor_id;
      debtor.items[0].price = -data.price;
      //
      creditor.debtor_id = data.debtor_id;
      creditor.items[0].type = 'cash';
      creditor.items[0].price = data.price;
      break;
    case 'b2b':
      debtor.items[0].bankacc_id = data.debtor_id;
      debtor.creditor_id = data.creditor_id;
      debtor.items[0].price = -data.price;
      //
      creditor.items[0].bankacc_id = data.creditor_id;
      creditor.debtor_id = data.debtor_id;
      creditor.items[0].price = data.price;
      break;
    case 'c2p':
      transfer.person_id = data.creditor_id;
      transfer.items[0].cost_id = data.debtor_id
      transfer.items[0].price = data.price;
      //
      if (data.debtor_comment)
        transfer.items[0].comment = String.editPersianCh(data.debtor_comment);
      if (data.creditor_comment)
        transfer.comment = String.editPersianCh(data.creditor_comment);
      break;
    case 'p2i':
      transfer.person_id = data.debtor_id;
      transfer.items[0].income_id = data.creditor_id
      transfer.items[0].price = -data.price;
      //
      if (data.debtor_comment)
        transfer.comment = String.editPersianCh(data.debtor_comment);
      if (data.creditor_comment)
        transfer.items[0].comment = String.editPersianCh(data.creditor_comment);
      break;
  };
  //
  // console.open(debtor);
  if (data.type == 'p2p' || data.type == 'p2i') {
    cb({
      data: {
        transfer: transfer
      },
      valid: true
    });
  } else {
    if (data.debtor_comment)
      debtor.comment = String.editPersianCh(data.debtor_comment);
    debtor.items[0].comment = String.editPersianCh(data.creditor_comment);
    if (data.creditor_comment)
      creditor.comment = String.editPersianCh(data.creditor_comment);
    cb({
      data: {
        debtor: debtor,
        creditor: creditor
      },
      valid: true
    });

  }

};

// function validate(data, cb) {
//   cb = cb || function() {};
//
//   // console.open(data);
//   if (!data ||
//     !data.type ||
//     !data.price ||
//     (data.type != 'c2b' && !data.debtor_id) ||
//     (data.type != 'b2c' && !data.creator_id) ||
//     !data.creator_id
//   ) {
//     return cb({
//       valid: false
//     });
//   }
//   var debtor = {
//     type: data.type,
//     creator_id: data.creator_id,
//     items: [{}]
//   };
//   var creditor = {
//     type: data.type,
//     creator_id: data.creator_id,
//     items: [{}]
//   };
//   if (!data._idOfDebtor && !data._idOfCreditor) {
//     var new_id = mongoose.Types.ObjectId();
//     debtor.items[0]._id = new_id;
//     creditor._id = new_id;
//   }
//   var transfer = {
//     type: data.type,
//     creator_id: data.creator_id,
//     items: [{}]
//   }
//   data.price = Math.abs(Number.NumtoEn(data.price));
//   switch (data.type) {
//     case 'p2p':
//       debtor.person_id = data.debtor_id;
//       debtor.items[0].creditor_id = data.creditor_id;
//       debtor.items[0].price = -(data.price);
//       if (data._idOfDebtor) debtor._id = data._idOfDebtor;
//       if (data._idOfCreditor) debtor.items[0]._id = data._idOfCreditor;
//       //
//       creditor.person_id = data.creditor_id;
//       creditor.items[0].debtor_id = data.debtor_id
//       creditor.items[0].price = data.price;
//       if (data._idOfCreditor) creditor._id = data._idOfCreditor;
//       break;
//     case 'c2b':
//       debtor.creditor_id = data.creditor_id;
//       debtor.items[0].type = 'cash';
//       debtor.items[0].price = -data.price;
//       //
//       creditor.items[0].bankacc_id = data.creditor_id;
//       creditor.items[0].price = data.price;
//       break;
//     case 'b2c':
//       debtor.items[0].bankacc_id = data.debtor_id;
//       debtor.items[0].price = -data.price;
//       //
//       creditor.debtor_id = data.debtor_id;
//       creditor.items[0].type = 'cash';
//       creditor.items[0].price = data.price;
//       break;
//     case 'b2b':
//       debtor.items[0].bankacc_id = data.debtor_id;
//       debtor.creditor_id = data.creditor_id;
//       debtor.items[0].price = -data.price;
//       //
//       creditor.items[0].bankacc_id = data.creditor_id;
//       creditor.debtor_id = data.debtor_id;
//       creditor.items[0].price = data.price;
//       break;
//     case 'c2p':
//       transfer.person_id = data.creditor_id;
//       transfer.items[0].cost_id = data.debtor_id
//       transfer.items[0].price = data.price;
//       //
//       if (data.debtor_comment)
//         transfer.items[0].comment = String.editPersianCh(data.debtor_comment);
//       if (data.creditor_comment)
//         transfer.comment = String.editPersianCh(data.creditor_comment);
//       break;
//     case 'p2i':
//       transfer.person_id = data.debtor_id;
//       transfer.items[0].income_id = data.creditor_id
//       transfer.items[0].price = -data.price;
//       //
//       if (data.debtor_comment)
//         transfer.comment = String.editPersianCh(data.debtor_comment);
//       if (data.creditor_comment)
//         transfer.items[0].comment = String.editPersianCh(data.creditor_comment);
//       break;
//   };
//   //
//   // console.open(debtor);
//   if (data.type == 'c2p' || data.type == 'p2i') {
//     cb({
//       data: {
//         transfer: transfer
//       },
//       valid: true
//     });
//   } else {
//     if (data.debtor_comment)
//       debtor.comment = String.editPersianCh(data.debtor_comment);
//     debtor.items[0].comment = String.editPersianCh(data.creditor_comment);
//     if (data.creditor_comment)
//       creditor.comment = String.editPersianCh(data.creditor_comment);
//     cb({
//       data: {
//         debtor: debtor,
//         creditor: creditor
//       },
//       valid: true
//     });
//
//   }
//
// };

//p2p
//person_id,items.debtor_id,items.creditor_id
//c2b
//creator_id,items.bankacc_id
//b2c
//creator_id,items.bankacc_id
//b2b
//debtor_id,creditor_id,items.bankacc_id
//c2p
//cost_id,creditor_id
//i2p
//income_id,debtor_id
