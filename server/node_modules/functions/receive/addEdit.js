//
//
//
var db = require('db');
var byAddEdit = require('functions/by/addEdit');
var convert_date = require('date');
var miladi_code = require('functions/miladi_code')
var newOperationId = require('functions/newOperationId/new');

module.exports = function(data, cb) {

  cb = cb || function() {};

  if (!data) {
    cb({
      status: 400,
      message: "low args"
    });
  } else {
    data = String.remove_empty_data(data);
    //validate for add & edit
    validate(data, function(status) {
      if (status.valid == true) {
        data = status.data;
        By(data, function(err, new_data) {
          if (err) throw err;
          if (!new_data) {
            cb(null, {
              add: false,
              adit: false,
              not_valid: true
            });
          }
          if (!new_data._id) {
            //add
            add(new_data, cb);
          } else {
            //edit
            db.operations.findOne({
              _id: new_data._id
            }, function(err, _receive) {
              if (err) throw err;
              if (_receive) {
                //require fields
                ['person_id', 'income_id', 'items'].forEach(function(attr) {
                  if (new_data[attr])
                    _receive[attr] = new_data[attr];
                });
                //optional fields
                ['by_id', 'comment'].forEach(function(attr) {
                  _receive[attr] = new_data[attr];
                });
                //
                _receive.save(function(err, r) {
                  if (err) {
                    throw err;
                  } else {
                    cb(null, {
                      edit: true
                    });
                  }
                });
                //
              } else {
                next({
                  status: 404
                });
              }
            })
            //end edit
          }
          //
        });
      } else {
        cb(null, {
          add: false,
          adit: false,
          not_valid: true
        });
      }
    });
    //
  }
}

function get_receiveId(cb) {
  cb = cb || function() {};
  newOperationId(function(err, res) {
    if (err) throw error;
    if (res) {
      // console.log(res);
      cb(null, res);
    }
  })
}

function By(data, cb) {
  //
  cb = cb || function() {};
  if ((!data.by_id || data.by_id == null) && data.by_title) {
    //
    data.by_title = data.by_title.replace(/ي/g, "ی");
    data.by_title = data.by_title.replace(/ك/g, "ک");
    byAddEdit({
      person_id: data.person_id,
      title: data.by_title
    }, function(err, res) {
      if (err) throw error;
      if (res) {
        data.by_id = res.by_id;
        delete data.by_title;
        //
        cb(null, data);
      }
    })
    //
  } else {
    if (data.by_id == null) {
      delete data.by_id
    }
    cb(null, data);
  }
  //
}

function add(receive, cb) {
  cb = cb || function() {};
  //add_receive
  get_receiveId(function(err, res) {
    if (err) {
      cb(null, {
        error: true,
        type: 'get_receiveId'
      })
    } else if (res) {
      receive.id = res;
      new db.operations(receive).save(function(err) {
        // error with db
        if (err) {
          cb({
            status: 400,
            error_obj: err
          }, null);
        } else {
          // save
          cb(null, {
            add: true
          });
        }
      });
    }
  });
}

function validate(data, cb) {

  cb = cb || function() {};

  if (data &&
    data.type &&
    data.owner_id &&
    data.owner_type &&
    data.creator_id &&
    data.items.length
  ) {
    //
    if (data.owner_type == 'person') {
      data.person_id = data.owner_id;
      if (data.cost && data.cost.cost_id && data.cost.price) {
        data.items.push({
          cost_id: data.cost.cost_id,
          price: Math.abs(Number.NumtoEn(data.cost.price))
        });
      } else if (data.income && data.income.income_id && data.income.price) {
        data.items.push({
          income_id: data.income.income_id,
          price: -Math.abs(Number.NumtoEn(data.income.price))
        });
      }
    } else if (data.owner_type == 'income') {
      data.income_id = data.owner_id;
      delete data.by_id;
      delete data.by_title;
    } else {
      cb({
        valid: false
      });
    }
    if (data.comment) String.editPersianCh(data.comment);
    //
    data.items.forEach(function(r) {
      if (r.serial) String.NumtoEn(r.serial);
      if (r.date) {
        var _date = r.date.split("/");
        convert_date.to_miladi({
          year: _date[0],
          month: _date[1],
          day: _date[2]
        }, function(miladi) {
          r.date = miladi;
        })
      }
      if (r.income_id) {
        r.price = -Math.abs(r.price);
      } else {
        r.price = Math.abs(r.price);
      }
      if (r.comment) String.editPersianCh(r.comment);
      //
    });
    //
    cb({
      data: data,
      valid: true
    });
  } else {
    cb({
      valid: false
    });
  }
};
