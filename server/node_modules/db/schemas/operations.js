//
// by mostafa
//

var mongoose = require('mongoose');
var Schema = mongoose.Schema;
var ObjectId = Schema.Types.ObjectId;

var operations_schema = Schema({
  //
  id: Number,
  type: {
    type: String,
    enum: ['first_period', 'cheque_ft', 'buy', 'sale', 'receive', 'payment', 'p2p', 'c2b', 'b2c', 'b2b', 'c2p', 'p2i']
  },
  person_id: {
    type: ObjectId,
    ref: "persons"
  },
  by_id: {
    type: ObjectId,
    ref: "bys"
  },
  product_id: {
    type: ObjectId,
    ref: 'products'
  },
  cost_id: {
    type: ObjectId,
    ref: 'costs'
  },
  income_id: {
    type: ObjectId,
    ref: 'incomes'
  },
  debtor_id: {
    type: ObjectId,
    ref: 'bankaccounts'
  },
  creditor_id: {
    type: ObjectId,
    ref: 'bankaccounts'
  },
  items: [{
    person_id: {
      type: ObjectId,
      ref: "persons"
    },
    product_id: {
      type: ObjectId,
      ref: 'products'
    },
    cost_id: {
      type: ObjectId,
      ref: 'costs'
    },
    income_id: {
      type: ObjectId,
      ref: 'incomes'
    },
    debtor_id: {
      type: ObjectId,
      ref: 'persons'
    },
    creditor_id: {
      type: ObjectId,
      ref: 'persons'
    },
    type: {
      type: String,
      enum: ["incalculable", "debtor", "creditor", "product", "cash", "cheque", "bank", "cost", "income"]
    },
    serial: String,
    date: Date,
    account_number: String,
    bankacc_id: {
      type: ObjectId,
      ref: 'bankaccounts'
    },
    branch_id: {
      type: ObjectId,
      ref: 'branches'
    },
    status: {
      type: String,
      enum: ['pn', 'dj', 'ph', 'bg', 'od']
    },
    pn_date: ObjectId,
    dj_date: ObjectId,
    ph_date: ObjectId,
    bg_date: ObjectId,
    od_date: ObjectId,
    value: Number,
    price: Number,
    comment: String
  }],
  creator_id: {
    type: ObjectId,
    ref: 'users'
  },
  comment: String
});


module.exports = mongoose.model('operations', operations_schema);
