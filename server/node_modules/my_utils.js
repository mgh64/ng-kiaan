// this file add some functions to node librarys ;)

var fs = require('fs');
var convert_date = require('date');
var db = require('db');
var _ = require('lodash');
var path = require('path');


Number.rmCamma = function(num) {
  return Number(String(num).replace(/\,/g, ''));
};

String.editPersianCh = function(str){
  var _return;
  _return = str.replace(/ي/g, "ی");
  _return = str.replace(/ك/g, "ک");
  _return = String.NumtoEn(_return);
  return _return;
}

String.file_extention = function(filename) {
  return filename.split('.').pop();
};

// change persion numbers to english numbers
Number.NumtoEn = function toEn(str) {
  str = String(str);
  for (var i = 0; i < str.length; i++) {
    var temp = str.charAt(i).charCodeAt(0);
    if (temp >= 1776 && temp <= 1785) temp -= 1728;
    str = str.substr(0, i) + String.fromCharCode(temp) + str.substr(i + 1);
  }
  return Number.rmCamma(str);
};

// change persion numbers to english numbers
String.NumtoEn = function toEn(str) {
  str = String(str);
  for (var i = 0; i < str.length; i++) {
    var temp = str.charAt(i).charCodeAt(0);
    if (temp >= 1776 && temp <= 1785) temp -= 1728;
    str = str.substr(0, i) + String.fromCharCode(temp) + str.substr(i + 1);
  }
  return str;
};


String.en_number_to_persian = function(string) {

  string = String(string);

  if (string) {
    string = string.replace(/0/g, "۰");
    string = string.replace(/1/g, "۱");
    string = string.replace(/2/g, "۲");
    string = string.replace(/3/g, "۳");
    string = string.replace(/4/g, "۴");
    string = string.replace(/5/g, "۵");
    string = string.replace(/6/g, "۶");
    string = string.replace(/7/g, "۷");
    string = string.replace(/8/g, "۸");
    string = string.replace(/9/g, "۹");

    return string;
  }
};


String.force_zero = function(value) {
  value = String(value);
  if (!value) {
    console.log('low args error in String.force function');
    return;
  } else if (value.charAt(0) != '0') {
    return String('0' + value);
  } else {
    return value;
  }
};


String.remove_empty_data = function(data) {

  for (var i in data) {
    if (data[i] == null ||
      _.isArray(data[i]) && data[i].length < 1 ||
      data[i] === "" ||
      data[i] == "false" ||
      data[i] == false ||
      data[i] == "FALSE" ||
      data[i] == "-" ||
      data[i] == " - "
    ) {
      delete data[i];
    } else if (data[i] == "TRUE" || data[i] == "true") {
      data[i] = true;
    } else if (_.isObject(data[i])) {
      String.remove_empty_data(data[i]);
    }
  }
  return data;
}

// generate random numbers for password
String.password_generator = function(len) {
  var password;
  do {
    password = Math.floor(Math.random() * 999999);
  } while (String(password).length != len);
  return String(password);
};


// changeing date object to persion date and time
Date.en_to_persion_date = function en_to_persion_date(d, callback) {
  var date = new Date(d);
  var _return = {};
  var min = date.getMinutes(),
    hour = date.getHours(),
    second = date.getSeconds();
  if (min < 60 - global.init.time_diffrence)
    min = Number(min) + global.init.time_diffrence;
  if (min < 10) min = '0' + String(min);
  if (hour < 10) hour = '0' + String(hour);
  if (second < 10) second = '0' + String(second);
  convert_date.to_shamsi({
    year: date.getFullYear(),
    month: date.getMonth() + 1,
    day: date.getDate()
  }, function(jalali) {
    _return.date = jalali.year + "/" + jalali.month + "/" +
      jalali.day;
    _return.time = hour + ":" + min + ":" + second;
    _return.second_less_time = hour + ":" + min;
    if (callback) callback(_return);
  });
}

String.replaceAt = function(index, character) {
  return this.substr(0, index) + character + this.substr(index + character.length);
};


Array.merge = function(array1, array2) {
  return _.uniq(array1.concat(array2));
};


// http://zackehh.com/handling-synchronous-asynchronous-loops-javascriptnode-js/
function async_while(iterations, func, callback) {
  callback = callback || function() {};
  var done = false;
  var foo = true;
  var loop = {
    next: function() {
      if (done) {
        return;
      }
      if (iterations) {
        func(loop);
      } else {
        done = true;
        if (callback) callback();
      }
    },

    refresh: function(it) {
      iterations = it;
    },

    break: function() {
      done = true;
      callback();
    }
  };
  loop.next();
  return loop;
}


String.sync_for = function(iterations, process, exit) {
  var index = 0,
    done = false,
    shouldExit = false;
  var loop = {
    next: function() {
      if (done) {
        if (shouldExit && exit) {
          return exit(); // Exit if we're done
        }
      }
      // If we're not finished
      if (index < iterations) {
        index++; // Increment our index
        process(loop); // Run our process, pass in the loop
        // Otherwise we're done
      } else {
        done = true; // Make sure we say we're done
        if (exit) exit(); // Call the callback on exit
      }
    },
    iteration: function() {
      return index - 1; // Return the loop number we're on
    },
    minmin: function() {
      index = index - 1;
    },
    break: function(end) {
      done = true; // End the loop
      shouldExit = end; // Passing end as true means we still call the exit callback
    }
  };
  loop.next();
  return loop;
};

String.remove_space = function(str) {
  str = String(str);
  return str.replace(/\s/g, '');
};
