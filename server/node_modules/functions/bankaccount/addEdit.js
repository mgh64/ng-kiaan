//
//
//
var mongoose = require('mongoose');
var db = require('db');

module.exports = function(bankacc, cb) {

  cb = cb || function() {};

  if (!bankacc) {
    cb({
      status: 400,
      message: "low args"
    });
  } else {
    bankacc = String.remove_empty_data(bankacc);
    //
    validate(bankacc, function(status) {
      switch (status.valid) {
        case true:
          if (bankacc && !bankacc._id) {
            //add
            var new_id = mongoose.Types.ObjectId();
            bankacc._id = new_id;
            bankacc.first_period.items[0].bankacc_id = new_id;
            bankacc.first_period.creator_id = bankacc.creator_id;

            db.bankaccounts.findOne({
              number: bankacc.number
            }, {
              _id: true
            }).lean().exec(function(err, bankacc_exists) {
              if (err) {
                cb({
                  status: 500,
                  error_obj: err
                });
              } else if (bankacc_exists) {
                cb(null, {
                  exists: true
                });
              } else {
                add(bankacc, bankacc.first_period, function(err, status) {
                  cb(err, status);
                });
              }
            });
          } else if (bankacc && bankacc._id) {
            //edit
            db.bankaccounts.findOne({
                _id: bankacc._id
              }, function(err, _bankacc) {
                if (err) throw err;
                if (_bankacc) {
                  //require fields
                  ['number', 'owner', 'branch_id']
                  .forEach(function(attr) {
                    if (bankacc[attr]) {
                      _bankacc[attr] = bankacc[attr];
                    }
                  });
                  //optional fields
                  ['comment', 'disable'].forEach(function(attr) {
                    _bankacc[attr] = bankacc[attr];
                  });
                  //
                  _bankacc.save(function(err, r) {
                    if (err) {
                      throw err;
                    } else {
                      //
                      db.operations.findOne({
                        _id: bankacc.first_period._id
                      }, function(err, ft) {
                        if (err) throw err;
                        if (ft) {
                          //require fields
                          ['items'].forEach(function(attr) {
                            if (bankacc.first_period[attr]) {
                              ft[attr] = bankacc.first_period[attr];
                            }
                          });
                          //
                          ft.save(function(err, r) {
                            if (err) {
                              throw err;
                            } else {
                              cb(null, {
                                edit: true
                              });
                            }
                          });
                          //
                        } else {
                          next({
                            status: 404
                          });
                        }
                      });

                    }
                  });
                  //
                } else {
                  next({
                    status: 404
                  });
                }
              })
              //end edit
          }
          break;
        case false:
          cb(null, {
            add: false,
            adit: false,
            not_valid: true
          })
          break;
      }
    });
    //
  }
}

function getBankaccId(cb) {
  cb = cb || function() {};
  db.bankaccounts.find({}, {
    id: 1,
    _id: 0
  }).sort({
    id: -1
  }).limit(1).lean().exec(function(err, id) {
    if (err) {
      return cb(err);
    } else if (id && id[0] && id[0].id) {
      return cb(null, id[0].id + 1);
    } else {
      return cb(null, 1)
    }
  });
};

function add(bankacc, bankacc_ft, cb) {
  cb = cb || function() {};
  //add_bankacc
  getBankaccId(function(err, res) {
    if (err) {
      cb(null, {
        error: true,
        type: 'getBankaccId'
      })
    } else if (res) {
      bankacc.id = res;
      new db.bankaccounts(bankacc).save(function(err) {
        // error with db
        if (err) {
          cb({
            status: 400,
            error_obj: err
          }, null);
        } else {
          // save
          new db.operations(bankacc_ft).save(function(err) {
            if (err) {
              cb({
                status: 400,
                error_obj: err
              }, null);
            } else {
              cb(null, {
                add: true
              });
            }
          })
        }
      });
    }
  });
};

function validate(data, cb) {

  cb = cb || function() {};

  if (data &&
    data.number &&
    data.owner &&
    data.branch_id &&
    data.creator_id &&
    data.first_period &&
    data.first_period.items.length
  ) {
    delete data.branchId;
    data.number = Number.NumtoEn(data.number);
    data.owner = data.owner.replace(/ي/g, "ی");
    data.owner = data.owner.replace(/ك/g, "ک");

    if (data.comment) {
      data.comment = data.comment.replace(/ي/g, "ی");
      data.comment = data.comment.replace(/ك/g, "ک");
    };
    if (!data.first_period.items[0].price) {
      data.first_period.items[0].price = 0;
    } else {
      data.first_period.items[0].price = Math.abs(Number.rmCamma(data.first_period.items[0].price));
    };
    //
    cb({
      data: data,
      valid: true
    });

  } else {
    cb({
      valid: false
    });
  }
};
