//
//
// by : mostafa

var mongoose = require('mongoose');
var db = require('db');
var encrypt = require('encrypt');

module.exports = function(person, cb) {

  cb = cb || function() {};

  if (!person) {
    cb({
      status: 400,
      message: "low args"
    });
  } else {
    person = String.remove_empty_data(person);

    validate(person, function(status) {
      switch (status.valid) {
        case true:
          person = status.data;
          if (person && !person._id) {
            //add
            var new_id = mongoose.Types.ObjectId();
            person._id = new_id;
            person.first_period.person_id = new_id;
            person.first_period.creator_id = person.creator_id;

            db.persons.findOne({
              $and: [{
                first_name: person.first_name
              }, {
                last_name: person.last_name
              }]
            }, {
              _id: true
            }).lean().exec(function(err, person_exists) {
              if (err) {
                cb({
                  status: 500,
                  error_obj: err
                });
              } else if (person_exists) {
                cb(null, {
                  exists: true
                });
              } else {
                add(person, person.first_period, function(err, status) {
                  cb(err, status);
                });
              }
            });
          } else if (person && person._id) {
            //edit
            db.persons.findOne({
                _id: person._id
              }, function(err, _person) {
                if (err) throw err;
                if (_person) {
                  //require fields
                  ['type', 'first_name', 'last_name', 'group_id']
                  .forEach(function(attr) {
                    if (person[attr]) {
                      _person[attr] = person[attr];
                    }
                  });
                  //optional fields
                  ['gender', 'credit_limit', 'address', 'comment', 'details', 'disable'].forEach(function(attr) {
                    _person[attr] = person[attr];
                  });
                  //
                  _person.save(function(err, r) {
                    if (err) {
                      //throw err;
                      cb(err);
                    } else {
                      //
                      db.operations.findOne({
                        _id: person.first_period._id
                      }, function(err, fp) {
                        if (err) throw err;
                        if (fp) {
                          //require fields
                          ['items'].forEach(function(attr) {
                            if (person.first_period[attr]) {
                              fp[attr] = person.first_period[attr];
                            }
                          });
                          //
                          fp.save(function(err, r) {
                            if (err) {
                              throw err;
                            } else {
                              cb(null, {
                                edit: true
                              });
                            }
                          });
                          //
                        } else {
                          next({
                            status: 404
                          });
                        }
                      });

                    }
                  });
                  //
                } else {
                  next({
                    status: 404
                  });
                }
              })
              //end edit
          }
          break;
        case false:
          cb(null, {
            add: false,
            adit: false,
            not_valid: true
          })
          break;
      }
    });

  }
};

function getPersonId(cb) {
  cb = cb || function() {};
  db.persons.find({}, {
    id: 1,
    _id: 0
  }).sort({
    id: -1
  }).limit(1).lean().exec(function(err, id) {
    if (err) {
      return cb(err);
    } else if (id && id[0] && id[0].id) {
      return cb(null, id[0].id + 1);
    } else {
      return cb(null, 1)
    }
  });
};

function add(person, person_ft, cb) {
  cb = cb || function() {};
  //add_person
  getPersonId(function(err, res) {
    if (err) {
      cb(null, {
        error: true,
        type: 'getPersonId'
      })
    } else if (res) {
      person.id = res;
      new db.persons(person).save(function(err) {
        // error with db
        if (err) {
          cb({
            status: 400,
            error_obj: err
          }, null);
        } else {
          // save
          new db.operations(person_ft).save(function(err) {
            if (err) {
              cb({
                status: 400,
                error_obj: err
              }, null);
            } else {
              cb(null, {
                add: true
              });
            }
          })
        }
      });
    }
  });
};

function validate(data, cb) {

  cb = cb || function() {};

  if (data &&
    data.type &&
    data.first_name &&
    data.last_name &&
    data.group_id &&
    data.creator_id &&
    data.first_period &&
    data.first_period.items.length
  ) {
    if (data.id) {
      data.id = Number.NumtoEn(data.id);
    }
    if (data.type != 'person' && data.type != 'company' && data.type != 'shareholder') {
      data.type = 'person'
    };
    data.first_name = data.first_name.replace(/ي/g, "ی");
    data.first_name = data.first_name.replace(/ك/g, "ک");
    data.last_name = data.last_name.replace(/ي/g, "ی");
    data.last_name = data.last_name.replace(/ك/g, "ک");

    if (data.address) {
      data.address = data.address.replace(/ي/g, "ی");
      data.address = data.address.replace(/ك/g, "ک");
    }

    if (data.credit_limit) {
      data.credit_limit = Number.NumtoEn(data.credit_limit);
    };
    if (data.details && data.details.length > 0) {
      for (var i = 0; i < data.details.length; i++) {
        data.details[i].number = String.NumtoEn(data.details[i].number);
      }
    };
    if (data.comment) {
      data.comment = data.comment.replace(/ي/g, "ی");
      data.comment = data.comment.replace(/ك/g, "ک");
    };
    if (!data.first_period.items[0].price) {
      data.first_period.items[0].price = 0;
      data.first_period.items[0].type = "incalculable";
    } else {
      //this all gh -
      switch (data.first_period.items[0].type) {
        case 'debtor':
          data.first_period.items[0].price = -Math.abs(Number.rmCamma(data.first_period.items[0].price));
          break;
        case 'creditor':
          data.first_period.items[0].price = Math.abs(Number.rmCamma(data.first_period.items[0].price));
          break;
        default:
          data.first_period.items[0].price = 0;
          data.first_period.items[0].type = "incalculable";
      }
    };
    //
    cb({
      data: data,
      valid: true
    });
  } else {
    cb({
      valid: false
    });
  }
};
