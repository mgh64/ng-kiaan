//
//
// by : mostafa

var mongoose = require('mongoose');
var db = require('db');

module.exports = function save_product(product, cb) {

  cb = cb || function() {};

  if (!product) {
    cb({
      status: 400,
      message: "low args"
    });
  } else {
    product = String.remove_empty_data(product);

    validate(product, function(status) {
      switch (status.valid) {
        case true:
          //
          if (product && !product._id) {
            //add
            var new_id = mongoose.Types.ObjectId();
            product._id = new_id;
            product.first_period.items[0].product_id = new_id;
            product.first_period.creator_id = product.creator_id;

            Exists({
              id: product.id,
              title: product.title
            }, function(err, result) {
              if (err) throw err;
              if (result.exists == false) {
                add(product, product.first_period, function(err, status) {
                  cb(err, status);
                });
              } else if (result.exists == true) {
                cb(null, {
                  exists: true
                });
              };
            });
            //end add
          } else if (product && product._id) {

            db.products.findOne({
                _id: product._id
              }, function(err, _product) {
                if (err) throw err;
                if (_product) {

                  //require fields
                  ['id', 'title', 'group_id', 'unit_id']
                  .forEach(function(attr) {
                    if (product[attr]) {
                      _product[attr] = product[attr];
                    }
                  });
                  //optional fields
                  ['min_stock', 'default_price', 'unsaleable', 'comment', 'disable'].forEach(function(attr) {
                    _product[attr] = product[attr];
                  });
                  //
                  _product.save(function(err, r) {
                    if (err) {
                      throw err;
                    } else {
                      //
                      db.operations.findOne({
                        _id: product.first_period._id
                      }, function(err, ft) {
                        if (err) throw err;
                        if (ft) {
                          //require fields
                          ['items'].forEach(function(attr) {
                            if (product.first_period[attr]) {
                              ft[attr] = product.first_period[attr];
                              // console.open(product.first_period[attr]);
                            }
                          });
                          //
                          ft.save(function(err, r) {
                            if (err) {
                              throw err;
                            } else {
                              cb(null, {
                                edit: true
                              });
                            }
                          });
                          //
                        } else {
                          next({
                            status: 404
                          });
                        }
                      });

                    }
                  });
                  //
                } else {
                  next({
                    status: 404
                  });
                }
              })
              //end edit
          };
          //
          break;
        case false:
          cb(null, {
            add: false,
            adit: false,
            not_valid: true
          })
          break;
      }

    })
  }
}

function add(product, product_ft, cb) {
  cb = cb || function() {};
  //add_product
  new db.products(product).save(function(err) {
    if (err) {
      cb({
        status: 400,
        error_obj: err
      }, null);
    } else {
      new db.operations(product_ft).save(function(err) {
        if (err) {
          cb({
            status: 400,
            error_obj: err
          }, null);
        } else {
          cb(null, {
            add: true
          });
        }
      })
    }
  });
}

function validate(data, cb) {

  cb = cb || function() {};

  if (data &&
    data.id &&
    data.title &&
    data.group_id &&
    data.unit_id &&
    data.first_period &&
    data.first_period.items.length
  ) {
    data.id = Number.NumtoEn(data.id);
    data.title = data.title.replace(/ي/g, "ی");
    data.title = data.title.replace(/ك/g, "ک");
    if (data.first_period.items[0].value) {
      data.first_period.items[0].value = Number.NumtoEn(data.first_period.items[0].value);
    } else {
      data.first_period.items[0].value = 0;
    };
    if (data.first_period.items[0].price) {
      data.first_period.items[0].price = Number.NumtoEn(data.first_period.items[0].price);
    } else {
      data.first_period.items[0].price = 0;
    };
    if (data.min_stock) {
      data.min_stock = Number.NumtoEn(data.min_stock);
    };
    if (data.default_price) {
      data.default_price = Number.NumtoEn(data.default_price);
    };
    if (data.comment) {
      data.comment = data.comment.replace(/ي/g, "ی");
      data.comment = data.comment.replace(/ك/g, "ک");
    };
    //
    cb({
      data: data,
      valid: true
    });
  } else {
    cb({
      valid: false
    });
  }
};

function Exists(product, cb) {

  cb = cb || function() {};
  var obj;
  if (product.id && product.title) {
    obj = {
      $or: [{
        id: product.id
      }, {
        title: product.title
      }]
    };
  } else if (product.id && !product.title) {
    obj = {
      id: product.id
    };
  } else if (!product.id && product.title) {
    obj = {
      title: product.title
    };
  };
  db.products.findOne(
    obj, {
      _id: true
    }).lean().exec(function(err, _exist) {
    if (err) {
      cb({
        status: 500,
        error_obj: err
      });
    } else if (_exist) {
      cb(null, {
        exists: true
      });
    } else {
      cb(null, {
        exists: false
      });
    }
  });

}
